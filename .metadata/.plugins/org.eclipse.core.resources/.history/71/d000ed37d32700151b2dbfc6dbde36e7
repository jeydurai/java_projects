package coreClasses;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import dataStructures.DSBase;

public class MasterThread {

	private Map<Integer, DSBase> baseDataSet;
	public MasterThread() {
		System.out.println("Initializing...");
		baseDataSet = new HashMap<Integer, DSBase>();
		
	}
	
	public void startMasterThread () {
		List<BookingMasterSlave> arrayThread = new ArrayList<BookingMasterSlave>();
		ExecutorService threadExecutor = Executors.newCachedThreadPool();
		
		
		arrayThread.add(new BookingMasterSlave("Thread-01"));
		arrayThread.add(new BookingMasterSlave("Thread-02"));
		arrayThread.add(new BookingMasterSlave("Thread-03"));
		arrayThread.add(new BookingMasterSlave("Thread-04"));
		arrayThread.add(new BookingMasterSlave("Thread-05"));
		/*arrayThread.add(new BookingMasterSlave("Thread-06"));
		arrayThread.add(new BookingMasterSlave("Thread-07"));
		arrayThread.add(new BookingMasterSlave("Thread-08"));
		arrayThread.add(new BookingMasterSlave("Thread-09"));
		arrayThread.add(new BookingMasterSlave("Thread-10"));*/
		
		for (BookingMasterSlave thread : arrayThread) {
			threadExecutor.execute(thread);
		}
		
		threadExecutor.shutdown();
		
		try {
			boolean taskEnded = threadExecutor.awaitTermination(Long.MAX_VALUE, TimeUnit.HOURS);
			if (taskEnded) {
				System.out.println("Thread Ended!");
			} else {
				System.out.println("Thread timed out!");
			}
			
		} catch (InterruptedException e) {
			System.out.println("Multi Threading got Interrupted/Completed!");
		}
		threadExecutor = null;
	}
}
